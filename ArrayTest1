import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/* Find the unique number if in a given array all the elements except one are repeated.*/

public class ArrayTest1 {
	
	public static void main(String[] args) {
		int a[] = {2,2,3,4,3,4,7,9,7};
		
		for(int i=0;i<a.length;i++){
			//System.out.println(a[i]);
		}
		
		//findNonDeletedApp1(a);
		//findNonDeletedApp2(a);
		findNonDeletedApp3(a);
	}

	private static void findNonDeletedApp1(int a[]) {
		//Brute force approach/naive approach
		for(int i=0;i<a.length;i++){
			boolean unique = true;
			for(int j = 0 ; j<a.length;j++){
				if(a[i]==a[j] && i != j){
					//System.out.println("duplicate found");
					unique = false;
					break;
				} 
			}
			if(unique){
				System.out.println("Unique elements is :" +a[i]);
			}
		}
	}
	
	private static void findNonDeletedApp2(int a[]) {
		//XOR approach
		int c = 0;
		for(int i=0;i<a.length;i++){
			
			c = c ^ a[i];
			
		}
		System.out.println("Unique elements is :" +c);
	}
	
	private static void findNonDeletedApp3(int a[]) {
		//Choosing efficient data structure approach
		Set<Integer> hs = new HashSet<Integer>();
		
		for(int i=0;i<a.length;i++){
			
			if(hs.contains(a[i])){
				hs.remove(a[i]);
			}
			else{
				hs.add(a[i]);
			}
			
		}
		Iterator<Integer> i = hs.iterator();
		while(i.hasNext()){
			System.out.println("Unique elements is :" +i.next());
		}
		
	}
	
	

}
